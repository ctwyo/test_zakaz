import { NextResponse } from "next/server";
import clientPromise from "../../../lib/mongodb";
import { generateTokens } from "../../../utils/jwt";

const getDb = async () => {
  const client = await clientPromise;
  return client.db();
};

export async function POST(req) {
  try {
    console.log("üîç API –≤—ã–∑–≤–∞–Ω: /api/auth");
    const { username } = await req.json();

    if (!username) {
      return NextResponse.json(
        { error: "Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" },
        { status: 400 }
      );
    }

    const db = await getDb();
    const user = await db.collection("users").findOne({ username });

    if (!user) {
      return NextResponse.json(
        { error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" },
        { status: 403 }
      );
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const { accessToken, refreshToken } = generateTokens(user);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refreshToken –≤ httpOnly cookie
    const response = NextResponse.json({
      message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
      accessToken,
    });
    response.cookies.set("refreshToken", refreshToken, {
      httpOnly: true,
      path: "/",
      maxAge: 7 * 24 * 60 * 60,
    });

    return response;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}
