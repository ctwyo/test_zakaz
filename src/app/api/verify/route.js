import { NextResponse } from "next/server";
import crypto from "crypto";
import clientPromise from "../../../lib/mongodb"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π clientPromise

const BOT_TOKEN = process.env.BOT_TOKEN;

const a = "1";
const b = "2";

export async function POST(req) {
  try {
    console.log("üîç API –≤—ã–∑–≤–∞–Ω: /api/verify");

    const { initData } = await req.json();
    if (!initData) {
      console.log("‚ùå –û—à–∏–±–∫–∞: initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      return NextResponse.json(
        { error: "initData is required" },
        { status: 400 }
      );
    }

    if (!BOT_TOKEN) {
      console.log("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      return NextResponse.json(
        { error: "Bot token is missing" },
        { status: 500 }
      );
    }

    // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º hash
    const params = new URLSearchParams(initData);
    const hash = params.get("hash");
    if (!hash) {
      console.log("‚ùå –û—à–∏–±–∫–∞: hash –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      return NextResponse.json({ error: "Hash is missing" }, { status: 400 });
    }

    params.delete("hash");
    const dataString = [...params.entries()]
      .map(([key, value]) => `${key}=${value}`)
      .sort()
      .join("\n");

    const secretKey = crypto
      .createHmac("sha256", Buffer.from("WebAppData"))
      .update(BOT_TOKEN)
      .digest();
    const computedHash = crypto
      .createHmac("sha256", secretKey)
      .update(dataString)
      .digest("hex");

    if (computedHash !== hash) {
      console.log("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π hash");
      return NextResponse.json({ error: "Invalid hash" }, { status: 403 });
    }

    // 2Ô∏è‚É£ –î–æ—Å—Ç–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
    const user = JSON.parse(params.get("user") || "{}");
    console.log("üìå –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user);

    if (!user || !user.username) {
      console.log("‚ùå –û—à–∏–±–∫–∞: user.username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      return NextResponse.json(
        { error: "User data is invalid" },
        { status: 403 }
      );
    }

    console.log("üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB:", user.username);

    // 3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB —á–µ—Ä–µ–∑ –æ–±—â–∏–π –∫–ª–∏–µ–Ω—Ç
    const client = await clientPromise;
    const db = client.db("sample_mflix"); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≤ clientPromise
    const usersCollection = db.collection("users");

    console.log("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");

    const allUsers = await usersCollection.find().toArray(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

    console.log("üìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ MongoDB –≤—Å–µ—Ö users:", allUsers);

    const existingUser = await usersCollection.findOne({
      telegramId: String(user.id),
    });

    console.log("üìå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ MongoDB:", existingUser);

    if (existingUser) {
      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à—ë–Ω:", user.username);
      return NextResponse.json({
        success: true,
        user: {
          username: user.username,
          photoUrl: user.photo_url || "",
        },
      });
    } else {
      console.log("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω:", user.username);
      return NextResponse.json({ error: "User not found" }, { status: 403 });
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    return NextResponse.json(
      { error: "Server error", details: error.message },
      { status: 500 }
    );
  }
}
